==========================================================================================================================================
I get this Dataset From Omline Platform for SQL Query practice purpose. I emport this dataset in MY SQL SERVER for cleaning ang Managing.
This dataset contain two table. one is Athlete_events and second is noc_region
I use shortform as athe and noc
==========================================================================================================================================
-- Lookout what exact dataset is? 
-- OLP is short form of name Database file name --

SELECT * 
FROM athe;

SELECT *
FROM noc;
==========================================================================================================================================
-- STARTED CLEANING--
-- FIND OUT ANY NULL VALUE WITHIN COLUMN BY COLUMN --

SELECT *
FROM ATHE
WHERE AGE IS NULL;

-- IF NULL VALUE FINDS --
UPDATE TABLE ATHE
SET AGE = 0
WHERE  AGE IS NULL;

========================================================================================================================================
-- ARRENGE ALL RECORDS IN PROPER ORDER --
-- ARRENDE ALL RECORSDS BY GAMES  --

SELECT * FROM ATHE
ORDER BY GAME;

SELECT * FROM NOC
ORDER BY NOC;
=======================================================================================================================================
NOW SOLVE SOME IMPORTANT QUESTION FOR RETRIVING DATA
-- How many olympics games have been held ?--

	SELECT COUNT(DISTINCT games) AS Total_Olympic_Games
    FROM ATHE;

=======================================================================================================================================
-- List down all Olympics games held so far.--

	SELECT DISTINCT(year),season,city
    FROM athe
    ORDER BY year;

======================================================================================================================================
--Mention the total no of nations who participated in each olympics game?--

WITH all_countries AS
        (SELECT aw.games, rg.region
        FROM athe aw  
        JOIN noc rg
		ON aw.noc = rg.noc
        GROUP BY games, rg.region)
    SELECT games, COUNT(1) AS Total_Countries
    FROM all_countries
    GROUP BY games
    ORDER BY games;
=====================================================================================================================================
--Which year saw the highest and lowest no of countries participating in olympics?--

WITH all_countries AS
        (SELECT aw.games, rg.region
        FROM athe aw  
        JOIN noc rg
		ON aw.noc = rg.noc
        GROUP BY games, rg.region)
    SELECT games, COUNT(1) AS Total_Countries
    FROM all_countries
    GROUP BY games
    ORDER BY Total_Countries;
====================================================================================================================================
-- Which nation has participated in all of the olympic games--
     
  WITH Tot_Games AS
              (SELECT COUNT(DISTINCT games) AS Total_Games
              FROM athe),
          countries AS
              (SELECT ar.games, rs.region AS country
              FROM athe ar
              JOIN noc rs
			  ON ar.noc=rs.noc
              GROUP BY games, rs.region),
          countries_participated AS
              (SELECT country, COUNT(1) AS Total_Participated_Games
              FROM countries
              GROUP BY country)
      SELECT cp.*
      FROM Countries_Participated cp
      JOIN Tot_Games tg 
	  ON tg.Total_Games = cp.Total_Participated_Games
      ORDER BY 1;
===================================================================================================================================
-- Identify the sport which was played in all summer olympics.--
	
WITH aa1 AS
		      	(SELECT COUNT(DISTINCT games) AS Total_Games
			  	FROM athe 
				WHERE season = 'Summer'),
			aa2	 AS
          		(SELECT DISTINCT games, sport
          		FROM athe
				WHERE season = 'Summer'),
			AA3 AS
          		(SELECT sport, COUNT(1) AS No_Of_Games
          		FROM aa2
          		GROUP BY sport)
		SELECT *
		FROM aa3
		JOIN aa1 
		ON aa1.total_games = aa3.no_of_games;
=====================================================================================================================================
-- Which Sports were just played only once in the olympics.--

	WITH aa1 AS
		      (SELECT DISTINCT games, sport
			   FROM athe),
		 aa2 AS
          		(SELECT sport, COUNT(1) AS No_OF_Games
          		FROM aa1
          		GROUP BY sport)
	    	  
			  SELECT aa2.*, aa1.games
			  FROM aa2
			  JOIN aa1
			  ON aa1.sport = aa2.sport
              WHERE aa2.No_Of_Games = 1
              ORDER BY aa1.sport;
======================================================================================================================================
-- Fetch oldest athletes to win a gold medal--

 WITH aa1 AS
            (SELECT name,age,team,games,city,sport, medal
            FROM athe),
        aa2 AS
            (SELECT *, rank() over(order by age desc) AS rnk
            FROM aa1
            WHERE medal='Gold')
    SELECT *
    FROM aa2
    WHERE rnk = 1;
=====================================================================================================================================
-- Fetch the top 5 athletes who have won the most gold medals.--

	WITH aa1 AS
		        (SELECT name, team, COUNT(1) AS Total_Gold_Medals
			    FROM athe
				WHERE medal = 'Gold'
				GROUP BY name, team
				),
		aa2 AS
				(SELECT *, DENSE_RANK() OVER (ORDER BY Total_Gold_Medals DESC) AS rnk
				FROM aa1)
		
		SELECT name, team, Total_Gold_Medals
		FROM aa2
		WHERE rnk <= 5;
====================================================================================================================================
 --Fetch the top 5 most successful countries in olympics. Success is defined by no of medals won.--

WITH aa1 AS
            (SELECT nr.region, count(1) as Total_Medals
            FROM athe ac
            join noc nr 
			ON nr.noc = ac.noc
            where medal <> 'NA'
            group by nr.region),
     aa2 as
            (SELECT *, DENSE_RANK() OVER(ORDER BY Total_Medals DESC) AS rnk
            FROM aa1)

    SELECT *
    from aa2
    WHERE rnk <= 5;
===================================================================================================================================
-- List down total gold, silver and bronze medals won by each country.--

  SELECT country
    	, coalesce(gold, 0) as gold
    	, coalesce(silver, 0) as silver
    	, coalesce(bronze, 0) as bronze
    FROM CROSSTAB('SELECT nr.region as country
    			, medal
    			, count(1) as total_medals
    			FROM olympics_history oh
    			JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    			where medal <> ''NA''
    			GROUP BY nr.region,medal
    			order BY nr.region,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(country varchar, bronze bigint, gold bigint, silver bigint)
    order by gold desc, silver desc, bronze desc;
=====================================================================================================================================
-- List down total gold, silver and bronze medals won by each country corresponding to each olympic games.--

 SELECT substring(games,1,position(' - ' in games) - 1) as games
        , substring(games,position(' - ' in games) + 3) as country
        , coalesce(gold, 0) as gold
        , coalesce(silver, 0) as silver
        , coalesce(bronze, 0) as bronze
    FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
                , medal
                , count(1) as total_medals
                FROM olympics_history oh
                JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
                where medal <> ''NA''
                GROUP BY games,nr.region,medal
                order BY games,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint);

========================================================================================================================================





